{"version":3,"sources":["scripts/main.js"],"names":["field","document","querySelector","rows","querySelectorAll","startBtn","scores","startMessage","gameOverMessage","winMessage","height","length","width","children","idCount","random","min","max","Math","floor","getFreeCells","freeCells","row","push","filter","cell","textContent","flat","Infinity","spawnCell","idArr","map","id","spawnedId","spawned","find","fillCell","clearField","forEach","className","makeEmptyCell","value","updateScores","num","moveCell","cell1","cell2","gameOver","classList","add","remove","win","addEventListener","body","moveFlag","isGameOver","event","key","count","i","j"],"mappings":"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","file":"main.8a9a9154.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst field = document.querySelector('.game-field');\nconst rows = field.querySelectorAll('.field-row');\nconst startBtn = document.querySelector('.start');\nconst scores = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst gameOverMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst height = rows.length;\nconst width = rows[0].children.length;\nlet idCount = 0;\n\n// установка id для каждой ячейки\n[...rows].forEach(row => {\n  [...row.children].forEach(cell => {\n    cell.id = idCount;\n    idCount++;\n  });\n});\n\n// рандомное значение в дипазоне (включительно макс и мин)\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// возвращает массив пустых ячеек\nfunction getFreeCells() {\n  const freeCells = [];\n\n  for (const row of rows) {\n    freeCells.push([...row.children].filter(cell => cell.textContent === ''));\n  }\n\n  return freeCells.flat(Infinity);\n}\n\n// заполнение случайной свободной клетки\nfunction spawnCell() {\n  const freeCells = getFreeCells();\n\n  if (freeCells.length === 0) {\n    return;\n  }\n\n  const idArr = freeCells.map(cell => +cell.id);\n\n  const spawnedId = random(0, idArr.length - 1);\n  const spawned = [...freeCells].find(cell => +cell.id === idArr[spawnedId]);\n\n  if (Math.random() >= 0.1) {\n    fillCell(spawned, 2);\n  } else {\n    fillCell(spawned, 4);\n  }\n}\n\n// очищает поле\nfunction clearField() {\n  [...rows].forEach(row => {\n    [...row.children].forEach(cell => {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n    });\n  });\n}\n\nstartBtn.addEventListener('click', () => {\n  clearField();\n  spawnCell();\n  spawnCell();\n\n  scores.textContent = 0;\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.textContent = 'Restart';\n\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  gameOverMessage.classList.add('hidden');\n});\n\n// очищает ячейку\nfunction makeEmptyCell(cell) {\n  cell.textContent = '';\n  cell.className = 'field-cell';\n}\n\n// заполняет ячейку\nfunction fillCell(cell, value = 2) {\n  cell.textContent = value;\n  cell.className = `field-cell field-cell--${value}`;\n}\n\n// прибавляет к очкам значение value\nfunction updateScores(value) {\n  const num = +scores.textContent;\n\n  scores.textContent = num + value;\n}\n\n// сдвиг ячейки cell1\nfunction moveCell(cell1, cell2) {\n  fillCell(cell2, cell1.textContent);\n  makeEmptyCell(cell1);\n}\n\n// выводит сообщение о проигрыше\nfunction gameOver() {\n  winMessage.classList.add('hidden');\n  gameOverMessage.classList.remove('hidden');\n}\n\n// выводит сообщение о победе\nfunction win() {\n  winMessage.classList.remove('hidden');\n}\n\ndocument.body.addEventListener('keydown', () => {\n  let moveFlag = false;\n  let isGameOver = true;\n\n  switch (event.key) {\n    case 'ArrowUp': {\n      for (let count = 0; count < height; count++) {\n        for (let i = 1; i < height; i++) {\n          for (let j = 0; j < width; j++) {\n            if (rows[i].children[j].textContent !== '') {\n              while (rows[i - 1].children[j].textContent === '') {\n                moveCell(rows[i].children[j], rows[i - 1].children[j]);\n                moveFlag = true;\n              }\n\n              if (rows[i - 1].children[j].textContent !== '') {\n                if (rows[i].children[j].textContent\n                      === rows[i - 1].children[j].textContent) {\n                  fillCell(rows[i - 1].children[j],\n                    +rows[i - 1].children[j].textContent * 2);\n                  makeEmptyCell(rows[i].children[j]);\n                  updateScores(+rows[i - 1].children[j].textContent);\n                  moveFlag = true;\n\n                  if (+rows[i - 1].children[j].textContent === 2048) {\n                    win();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case 'ArrowDown': {\n      for (let count = 0; count < height; count++) {\n        for (let i = height - 2; i >= 0; i--) {\n          for (let j = 0; j < width; j++) {\n            if (rows[i].children[j].textContent !== '') {\n              while (rows[i + 1].children[j].textContent === '') {\n                moveCell(rows[i].children[j], rows[i + 1].children[j]);\n                moveFlag = true;\n              }\n\n              if (rows[i + 1].children[j].textContent !== '') {\n                if (rows[i].children[j].textContent\n                      === rows[i + 1].children[j].textContent) {\n                  fillCell(rows[i + 1].children[j],\n                    +rows[i + 1].children[j].textContent * 2);\n                  makeEmptyCell(rows[i].children[j]);\n                  updateScores(+rows[i + 1].children[j].textContent);\n                  moveFlag = true;\n\n                  if (+rows[i + 1].children[j].textContent === 2048) {\n                    win();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case 'ArrowLeft': {\n      for (let count = 0; count < height; count++) {\n        for (let j = 1; j < height; j++) {\n          for (let i = 0; i < width; i++) {\n            if (rows[i].children[j].textContent !== '') {\n              while (rows[i].children[j - 1].textContent === '') {\n                moveCell(rows[i].children[j], rows[i].children[j - 1]);\n                moveFlag = true;\n              }\n\n              if (rows[i].children[j - 1].textContent !== '') {\n                if (rows[i].children[j].textContent\n                      === rows[i].children[j - 1].textContent) {\n                  fillCell(rows[i].children[j - 1],\n                    +rows[i].children[j - 1].textContent * 2);\n                  makeEmptyCell(rows[i].children[j]);\n                  updateScores(+rows[i].children[j - 1].textContent);\n                  moveFlag = true;\n\n                  if (+rows[i].children[j - 1].textContent === 2048) {\n                    win();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case 'ArrowRight': {\n      for (let count = 0; count < height; count++) {\n        for (let j = height - 2; j >= 0; j--) {\n          for (let i = 0; i < width; i++) {\n            if (rows[i].children[j].textContent !== '') {\n              while (rows[i].children[j + 1].textContent === '') {\n                moveCell(rows[i].children[j], rows[i].children[j + 1]);\n                moveFlag = true;\n              }\n\n              if (rows[i].children[j + 1].textContent !== '') {\n                if (rows[i].children[j].textContent\n                      === rows[i].children[j + 1].textContent) {\n                  fillCell(rows[i].children[j + 1],\n                    +rows[i].children[j + 1].textContent * 2);\n                  makeEmptyCell(rows[i].children[j]);\n                  updateScores(+rows[i].children[j + 1].textContent);\n                  moveFlag = true;\n\n                  if (+rows[i].children[j + 1].textContent === 2048) {\n                    win();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    default: {\n      return;\n    }\n  }\n\n  if (moveFlag) {\n    spawnCell();\n  }\n\n  // проверка на проигрыш\n  if (getFreeCells().length === 0) {\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (j < width - 1) {\n          if (rows[i].children[j].textContent\n                === rows[i].children[j + 1].textContent) {\n            isGameOver = false;\n          }\n        }\n\n        if (i < height - 1) {\n          if (rows[i].children[j].textContent\n                === rows[i + 1].children[j].textContent) {\n            isGameOver = false;\n          }\n        }\n      }\n    }\n  }\n\n  if (isGameOver) {\n    gameOver();\n  }\n});\n"]}